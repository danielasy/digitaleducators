3. Security
#1 ) Impersonation of Users
Without an authentication system, anyone would be able to impersonate other users freely, which could greatly disrupt the website’s indented functioning.
To prevent this issue we implemented an authentication system that allows users to identify themselves via a combination of email and password or through a third-party login system (social login).
The authentication system was implemented through the use of different packages and frameworks:
Passport: an authentication middleware for Node.js
Crypto : encapsulates secure credentials to be transferred through http(s). Generates unique hash for each user, preventing dictionary attacks.
Express-jwt and jsonwebtoken: implements tokens as part of authentication.

Testing: 
Testing was quite straightforward. We attempted to use impersonate another user and were unable to get access into that user’s account without his secret credentials (password), so we could not do anything on his behalf.

#2) Cross-Site Request Forgery (CSRF)
As described in class, CSRF is a type of attack that allows a malicious website containing links or javascript to execute a request on our website on behalf of the logged in user who visits the malicious website.
To prevent this vulnerability we use JSON Web Tokens (JWT) as an additional layer of security in our authentication system. JWTs are a compact and URL-safe JSON object, which is cryptographically signed to verify an user’s authenticity.
This functionality was implemented through the use of the jsonwebtoken and express-jwt packages along with our authentication system.



Testing: 
To test against this vulnerability we performed a CSRF ourselves by creating a simple webpage (“/Report/attackTest.html”) that uses a simple ajax script to attempt to create a false question on the user’s behalf via a POST.
By monitoring the browser Network logger when using that page and clicking the button that generates the attack we can verify that the server responds with “401”, while on the server console it logs
“UnauthorizedError: No authorization token was found
        at middleware (…)”
